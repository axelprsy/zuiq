import os
import subprocess
import sys
import sqlite3

def install_requirements():
    print("Installation des d√©pendances depuis requirements.txt...")

    pip_executable = "pip" if os.name == "nt" else "pip3"

    try:
        subprocess.run([pip_executable, "install", "-r", "requirements.txt"], check=True)
        print("\n\n‚úÖ Les d√©pendances ont √©t√© install√©es avec succ√®s.")
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Erreur lors de l'installation des d√©pendances : {e}")
        sys.exit(1)


def create_db():
    print("‚ÑπÔ∏è Cr√©ation du dossier et de la base de donn√©es...")
    try:
        if not os.path.exists("db"):
            os.mkdir("db")
            print("‚úÖ Dossier 'db' cr√©√© avec succ√®s.")
        else:
            print("‚ÑπÔ∏è Le dossier 'db' existe d√©j√†.")

        db_path = os.path.join("db", "app.db")
        if not os.path.exists(db_path):
            connection = sqlite3.connect(db_path)
            connection.close()
            print("‚úÖ Fichier de base de donn√©es 'app.db' cr√©√© avec succ√®s.")
        else:
            print("‚ÑπÔ∏è Le fichier 'app.db' existe d√©j√†.")
    except Exception as e:
        print(f"‚ùå Erreur lors de la cr√©ation de la base de donn√©es : {e}")
        sys.exit(1)

def init_db():
    print("üîß Ex√©cution de init_db.py dans le dossier 'functions'...")
    init_db_path = os.path.join("functions", "init_db.py")
    if not os.path.exists(init_db_path):
        print(f"‚ùå Le fichier {init_db_path} n'existe pas. Assurez-vous qu'il est pr√©sent.")
        sys.exit(1)

    try:
        subprocess.run([sys.executable, init_db_path], check=True)
        print("‚úÖ Le fichier 'init_db.py' a √©t√© ex√©cut√© avec succ√®s.")
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Une erreur est survenue lors de l'ex√©cution de 'init_db.py' : {e}")
        sys.exit(1)

def install_mistral():
    print("üîß Installation de Mistral...")
    
    try:
        subprocess.run(["ollama", "pull", "mistral"], check=True)
        print("\n\n‚úÖ Mistral a √©t√© install√© avec succ√®s.")
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Erreur lors de l'installation de Mistral : {e}")
        sys.exit(1)

def install_ollama():
    print("üîß Installation de Ollama...")

    try:
        if os.name == "nt":
            subprocess.run(["winget", "install", "ollama.ollama"], check=True)
        elif sys.platform == "darwin":
            subprocess.run(["brew", "install", "ollama"], check=True)
        elif sys.platform == "linux":
            subprocess.run(["curl", "-fsSL", "https://ollama.com/install.sh", "|", "sh"], check=True)
        else:
            print("‚ùå Syst√®me d'exploitation non support√©.")
            sys.exit(1)
        print("\n\n‚úÖ Ollama a √©t√© install√© avec succ√®s.")
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Erreur lors de l'installation de Ollama : {e}")
        sys.exit(1)


if __name__ == "__main__":

    install_requirements()

    create_db()

    install_ollama()

    install_mistral()

    init_db()

    print("\n\nüéâ Configuration termin√©e avec succ√®s. Vous pouvez maintenant lancer votre API !")
